let {createElement: č, useState: û, useEffect: ū, useRef: ü} = require('react'),
	[{innerHeight: í, innerWidth: ì, location: L}, D] = [window, d => d || 500],
	[O, P] = [require('react-dom').render, require('query-string').parse],
	[{d, c}, {floor: f, random: r, sqrt: q}, Ø] = [P(L.search), Math, []],
	[e, [G, i, g, F, Z], Ä] = [[0, 1, 2, 3, 5, 6, 7, 8], Ø, a => [...Array(a)]],
	[z, ß, J, I, Ã] = [f(q((í * ì) / D(c))), '50px', 'height', 'width', 'a'],
	[R, C, M] = [f(í / z), f(ì / z), (n, s, q) => (n !== s && Š(q, n), n)],
	[H, l, Ž] = [f(í / R), Ä(R).map(() => Ä(C).map(() => r() < 0.4)), 'canvas'],
	[š, Ō] = [q => [q[0] * H, q[1] * H, H, H], q => Š(q, (l[q[1]][q[0]] ^= 1))],
	E = (z, I, j, J) => (I && I <= R && J && J <= C ? [...z, [I, j - 1]] : z),
	Ę = (i, j) => (z, d) => E(z, i + (d % 3), j + f(d / 3), j + (d % 3)),
	k = l.map((r, i) => r.map((_, j) => e.reduce(Ę(i, j), Ø))),
	Š = (q, f) => [(Z.fillStyle = f ? '#000' : '#fff'), Z.fillRect(...š(q))],
	ñ = ([j, i]) => k[i][j].reduce((a, [x, y]) => a + l[x - 1][y], 0),
	Ń = (q, s, p) => M(s ? f(q / 2) === 1 : q === 3, s, p),
	ç = () => l.map((r, Y) => r.map((s, X) => Ń(ñ([X, Y]), s, [X, Y]))),
	[Ū, ã] = [() => ({ref: F, [I]: ì, [J]: í}), () => F.current.getContext`2d`],
	æ = () => č(Ž, {...Ū(), [œ]: e => Ō([f(e.clientX / H), f(e.clientY / H)])}),
	å = () => (([Z, i] = [ã(), setInterval(â, D(d))]), () => clearInterval(i)),
	[ä, â] = [() => ([[g, G], F, e] = [û(1), ü(), ū(å)]), () => g && (l = ç())],
	[s, œ] = [{position: 'fixed', top: ß, left: ß, [J]: ß, [I]: ß}, 'onClick'],
	á = g => ({[œ]: () => G(!g), style: {...s, background: g ? 'red' : 'tan'}});
O(č(() => (ä(), č(Ã, 0, [č(Ã, á(g)), æ()]))), document.getElementById`r`);
