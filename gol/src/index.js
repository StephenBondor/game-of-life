import {render as O} from 'react-dom';
import {parse as P} from 'query-string';
import {createElement as č, useState as û, useEffect as ū, useRef} from 'react';
let [{innerHeight: í, innerWidth: ì, location: L}, D] = [window, d => d || 500];
let [{search: S}, {floor: f, random: r, sqrt: q}, ÿ, Ø] = [L, Math, '#FFF', []];
let [{delay: d, cellcount: c}, Ÿ, e] = [P(S), '#000', [0, 1, 2, 3, 5, 6, 7, 8]];
let [z, Ä, Œ] = [f(q((í * ì) / D(c))), a => [...Array(a)], () => f(r() * 2)];
let [R, C, ê] = [f(í / z), f(ì / z), (q, X) => q && q <= X];
let [W, H, l] = [f(ì / C), f(í / R), Ä(R).map(() => Ä(C).map(Œ))];
let [š, ė] = [(x, y) => [x * W, y * H, W, H], (z, I, J) => [...z, [I, J]]];
let E = (z, I, j, J) => (ê(I, R) && ê(J, C) ? ė(z, I, j) : z);
let Ę = (i, j) => [(z, d) => E(z, i + (d % 3), j + f(d / 3), j + (d % 3)), Ø];
let k = l.map((r, i) => r.map((_, j) => e.reduce(...Ę(i, j))));
let ñ = (j, i) => k[i][j].reduce((a, q) => a + l[q[0] - 1][q[1] - 1], 0);
let [ń, I, J] = [(n, s) => (s ? n < 4 && n > 1 : n === 3), 'width', 'height'];
let Š = (x, y, f) => (Z.fillStyle = f ? Ÿ : ÿ) && Z.fillRect(...š(x, y));
let [M, [G, i, g, F, Z]] = [(n, s, j, i) => [n, n !== s && Š(j, i, n)], Ø];
let ç = () => l.map((r, i) => r.map((s, j) => M(ń(ñ(j, i), s), s, j, i)[0]));
let Ō = (Y, X) => X + 1 && Y + 1 && Š(X, Y, (l[Y][X] = !l[Y][X]));
let ł = ({clientX: X, clientY: Y}) => Ō(f((Y - 1) / H), f((X - 1) / W));
let [ã, â] = [() => F.current.getContext('2d'), [() => g && (l = ç()), D(d)]];
let å = () => [([Z, i] = [ã(), setInterval(...â)]), () => clearInterval(i)][1];
let [ä, ß] = [() => ([[g, G], F, e] = [û(1), useRef(0), ū(å, Ø)]), '50px'];
let [s, œ] = [{position: 'fixed', top: ß, left: ß, [J]: ß, [I]: ß}, 'onClick'];
let á = g => ({[œ]: () => G(!g), style: {...s, background: g ? 'red' : 'tan'}});
let æ = g => [č('button', á(g)), č('canvas', {[I]: ì, ref: F, [œ]: ł, [J]: í})];
O(č(() => [ä(), č('div', 0, ...æ(g))][1]), document.getElementById('root'));
