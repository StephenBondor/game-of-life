import {render} from 'react-dom';
import {parse} from 'query-string';
import React, {useState, useEffect, useRef, createElement} from 'react';
const {innerHeight: iH, innerWidth: iW, location} = window;
const [{floor: f, random: r, sqrt}, {delay}] = [Math, parse(location.search)];
const size = f(sqrt((iH * iW) / (parse(location.search).cellcount || 1000)));
const [R, C, B, Ę] = [f(iH / size), f(iW / size), 'black', 'white'];
const [W, H, bg, ÿ] = [f(iW / C), f(iH / R), 'background', () => delay || 100];
let [h, Z, e, d, g, G] = [H * R, {}, [0, 1, 2, 3, 5, 6, 7, 8], 0, true, 0];
let [l, Ë] = [[...Array(R)].map(() => [...Array(C)].map(() => f(r() * 2))), 0];
const [û, ü, w] = [(i, d) => i + (d % 3), (j, d) => j + f(d / 3), W * C];
const ù = (z, i, d, j) => [...z, {x: û(i, d) - 1, y: ü(j, d) - 1}];
const [î, t] = [(i, d, X) => û(i, d) && û(i, d) <= X, (x, p) => f((x - 1) / p)];
const E = (z, i, d, j) => (î(i, d, R) && î(j, d, C) ? ù(z, i, d, j) : z);
let k = l.map((r, i) => r.map((_, j) => e.reduce((z, d) => E(z, i, d, j), [])));
const s1 = {position: 'fixed', top: '25px', left: `${iW - 75}px`};
const [s, D, N] = [{...s1, width: '50px', height: '50px'}, 'red', 'green'];
const į = (x, y, f) => [(Z.fillStyle = f ? B : Ę), Z.fillRect(...ī(x, y))];
const ñ = (i, j) => k[i][j].reduce((a, {x, y}) => a + l[x][y], 0);
const ń = (i, j, s) => (s ? ñ(i, j) < 4 && ñ(i, j) > 1 : ñ(i, j) === 3);
const [m, œ] = [(i, j, s) => [į(j, i, ń(i, j, s)), ń(i, j, s)][1], () => G(!g)];
const ū = (i, j, s) => (ń(i, j, s) !== s ? m(i, j, s) : ń(i, j, s));
const ï = () => (l = l.map((r, i) => r.map((s, j) => ū(i, j, s))));
const [ö, ó] = [(Y, X) => (l[t(Y, H)][t(X, W)] = !l[t(Y, H)][t(X, W)]), 'div'];
const [ø, ī] = [(Y, X) => t(X, W) && t(Y, H), (x, y) => [x * W, y * H, W, H]];
const ł = ({clientX: X, clientY: Y}) => ø(Y, X) && į(t(X, W), t(Y, H), ö(Y, X));
const ã = () => [Ë.current.getContext('2d'), setInterval(() => g && ï(), ÿ())];
const [å, â] = [() => [([Z, d] = ã()), () => clearInterval(d)][1], [g, Ë]];
const ä = () => ([[g, G], Ë, e] = [useState(true), useRef(0), useEffect(å, â)]);
const [T, V] = [<button />, <canvas width={w} height={h} onClick={ł} />];
const ú = g => ({props: {onClick: œ, style: {...s, [bg]: g ? D : N}}});
const A = () => [ä(), createElement(ó, 0, {...T, ...ú(g)}, {...V, ref: Ë})][1];
render(<A />, document.getElementById('root'));
